import os
import shutil

SKIP_NAMES = {"api_export.py", "inferra.egg-info", "__pycache__"}

TEMPLATE_HEADER = '''"""DO NOT EDIT.

This file was autogenerated. Do not edit it by hand,
since your modifications would be overwritten.
"""
'''


def get_structure(root):
    """Returns a set of relative directory paths under root"""
    dirs_set = set()
    for dirpath, dirnames, _ in os.walk(root):
        rel = os.path.relpath(dirpath, root)
        if rel != ".":
            dirs_set.add(rel)
    return dirs_set


def generate_init_for_dir(src_dir, api_dir, src_package_prefix, is_root=False):
    lines = [TEMPLATE_HEADER]

    for entry in sorted(os.listdir(src_dir)):
        if entry in SKIP_NAMES:
            continue

        src_path = os.path.join(src_dir, entry)
        name, ext = os.path.splitext(entry)

        # Skip non-Python files, hidden files, and __init__.py
        if ext != ".py" or name.startswith("_") or name == "__init__":
            continue

        # Only import version.py at root
        if is_root and name == "version":
            lines.append(
                "from inferra.src.version import __version__ as __version__\n"
            )
        else:
            lines.append(f"from {src_package_prefix} import {name} as {name}\n")

    # Import subpackages
    for entry in sorted(os.listdir(src_dir)):
        if entry in SKIP_NAMES:
            continue
        src_path = os.path.join(src_dir, entry)
        if os.path.isdir(src_path) and not entry.startswith("_"):
            lines.append(
                f"from {src_package_prefix} import {entry} as {entry}\n"
            )

    os.makedirs(api_dir, exist_ok=True)
    init_file = os.path.join(api_dir, "__init__.py")
    with open(init_file, "w") as f:
        f.writelines(lines)
    print(f"[generated] {init_file}")


def sync_api_with_src(src_root, api_root):
    # Remove extra dirs in API
    src_dirs = get_structure(src_root)
    api_dirs = get_structure(api_root)

    for extra in api_dirs - src_dirs:
        full_path = os.path.join(api_root, extra)
        print(f"[remove] {full_path}")
        shutil.rmtree(full_path)

    # Generate __init__.py for all src dirs including root
    for dir_rel in src_dirs | {""}:
        src_dir = os.path.join(src_root, dir_rel)
        api_dir = os.path.join(api_root, dir_rel)
        src_package_prefix = "inferra.src" + (
            f".{dir_rel.replace(os.sep, '.')}" if dir_rel else ""
        )
        generate_init_for_dir(
            src_dir, api_dir, src_package_prefix, is_root=(dir_rel == "")
        )


if __name__ == "__main__":
    sync_api_with_src("inferra/src", "inferra/api")
